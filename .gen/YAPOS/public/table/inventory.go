//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Inventory = newInventoryTable("public", "inventory", "")

type inventoryTable struct {
	postgres.Table

	// Columns
	ItemID          postgres.ColumnInteger
	ShopID          postgres.ColumnInteger
	ItemName        postgres.ColumnString
	ItemDescription postgres.ColumnString
	Quantity        postgres.ColumnInteger
	MinimumQuantity postgres.ColumnInteger
	IsCount         postgres.ColumnBool
	IsObsolete      postgres.ColumnBool
	CreatedAt       postgres.ColumnTimez
	UpdatedAt       postgres.ColumnTimez
	ActualPrice     postgres.ColumnString
	DiscountedPrice postgres.ColumnString
	CostPrice       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InventoryTable struct {
	inventoryTable

	EXCLUDED inventoryTable
}

// AS creates new InventoryTable with assigned alias
func (a InventoryTable) AS(alias string) *InventoryTable {
	return newInventoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InventoryTable with assigned schema name
func (a InventoryTable) FromSchema(schemaName string) *InventoryTable {
	return newInventoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InventoryTable with assigned table prefix
func (a InventoryTable) WithPrefix(prefix string) *InventoryTable {
	return newInventoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InventoryTable with assigned table suffix
func (a InventoryTable) WithSuffix(suffix string) *InventoryTable {
	return newInventoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInventoryTable(schemaName, tableName, alias string) *InventoryTable {
	return &InventoryTable{
		inventoryTable: newInventoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newInventoryTableImpl("", "excluded", ""),
	}
}

func newInventoryTableImpl(schemaName, tableName, alias string) inventoryTable {
	var (
		ItemIDColumn          = postgres.IntegerColumn("item_id")
		ShopIDColumn          = postgres.IntegerColumn("shop_id")
		ItemNameColumn        = postgres.StringColumn("item_name")
		ItemDescriptionColumn = postgres.StringColumn("item_description")
		QuantityColumn        = postgres.IntegerColumn("quantity")
		MinimumQuantityColumn = postgres.IntegerColumn("minimum_quantity")
		IsCountColumn         = postgres.BoolColumn("isCount")
		IsObsoleteColumn      = postgres.BoolColumn("isObsolete")
		CreatedAtColumn       = postgres.TimezColumn("created_at")
		UpdatedAtColumn       = postgres.TimezColumn("updated_at")
		ActualPriceColumn     = postgres.StringColumn("actual_price")
		DiscountedPriceColumn = postgres.StringColumn("discounted_price")
		CostPriceColumn       = postgres.StringColumn("cost_price")
		allColumns            = postgres.ColumnList{ItemIDColumn, ShopIDColumn, ItemNameColumn, ItemDescriptionColumn, QuantityColumn, MinimumQuantityColumn, IsCountColumn, IsObsoleteColumn, CreatedAtColumn, UpdatedAtColumn, ActualPriceColumn, DiscountedPriceColumn, CostPriceColumn}
		mutableColumns        = postgres.ColumnList{ShopIDColumn, ItemNameColumn, ItemDescriptionColumn, QuantityColumn, MinimumQuantityColumn, IsCountColumn, IsObsoleteColumn, CreatedAtColumn, UpdatedAtColumn, ActualPriceColumn, DiscountedPriceColumn, CostPriceColumn}
	)

	return inventoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ItemID:          ItemIDColumn,
		ShopID:          ShopIDColumn,
		ItemName:        ItemNameColumn,
		ItemDescription: ItemDescriptionColumn,
		Quantity:        QuantityColumn,
		MinimumQuantity: MinimumQuantityColumn,
		IsCount:         IsCountColumn,
		IsObsolete:      IsObsoleteColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		ActualPrice:     ActualPriceColumn,
		DiscountedPrice: DiscountedPriceColumn,
		CostPrice:       CostPriceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
