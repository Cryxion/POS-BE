//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Inventory = newInventoryTable("public", "inventory", "")

type inventoryTable struct {
	postgres.Table

	// Columns
	Item     postgres.ColumnString
	Quantity postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InventoryTable struct {
	inventoryTable

	EXCLUDED inventoryTable
}

// AS creates new InventoryTable with assigned alias
func (a InventoryTable) AS(alias string) *InventoryTable {
	return newInventoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InventoryTable with assigned schema name
func (a InventoryTable) FromSchema(schemaName string) *InventoryTable {
	return newInventoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InventoryTable with assigned table prefix
func (a InventoryTable) WithPrefix(prefix string) *InventoryTable {
	return newInventoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InventoryTable with assigned table suffix
func (a InventoryTable) WithSuffix(suffix string) *InventoryTable {
	return newInventoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInventoryTable(schemaName, tableName, alias string) *InventoryTable {
	return &InventoryTable{
		inventoryTable: newInventoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newInventoryTableImpl("", "excluded", ""),
	}
}

func newInventoryTableImpl(schemaName, tableName, alias string) inventoryTable {
	var (
		ItemColumn     = postgres.StringColumn("item")
		QuantityColumn = postgres.IntegerColumn("quantity")
		allColumns     = postgres.ColumnList{ItemColumn, QuantityColumn}
		mutableColumns = postgres.ColumnList{ItemColumn, QuantityColumn}
	)

	return inventoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Item:     ItemColumn,
		Quantity: QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
