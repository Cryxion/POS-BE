//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Transaction = newTransactionTable("public", "transaction", "")

type transactionTable struct {
	postgres.Table

	// Columns
	TransactionID     postgres.ColumnInteger
	CustomerID        postgres.ColumnInteger
	TotalPrice        postgres.ColumnString
	PaymentMethodID   postgres.ColumnInteger
	PaymentStatus     postgres.ColumnInteger
	PaymentIdentifier postgres.ColumnString
	CreatedAt         postgres.ColumnTimez

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TransactionTable struct {
	transactionTable

	EXCLUDED transactionTable
}

// AS creates new TransactionTable with assigned alias
func (a TransactionTable) AS(alias string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionTable with assigned schema name
func (a TransactionTable) FromSchema(schemaName string) *TransactionTable {
	return newTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionTable with assigned table prefix
func (a TransactionTable) WithPrefix(prefix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionTable with assigned table suffix
func (a TransactionTable) WithSuffix(suffix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionTable(schemaName, tableName, alias string) *TransactionTable {
	return &TransactionTable{
		transactionTable: newTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTransactionTableImpl("", "excluded", ""),
	}
}

func newTransactionTableImpl(schemaName, tableName, alias string) transactionTable {
	var (
		TransactionIDColumn     = postgres.IntegerColumn("transaction_id")
		CustomerIDColumn        = postgres.IntegerColumn("customer_id")
		TotalPriceColumn        = postgres.StringColumn("total_price")
		PaymentMethodIDColumn   = postgres.IntegerColumn("payment_method_id")
		PaymentStatusColumn     = postgres.IntegerColumn("payment_status")
		PaymentIdentifierColumn = postgres.StringColumn("payment_identifier")
		CreatedAtColumn         = postgres.TimezColumn("created_at")
		allColumns              = postgres.ColumnList{TransactionIDColumn, CustomerIDColumn, TotalPriceColumn, PaymentMethodIDColumn, PaymentStatusColumn, PaymentIdentifierColumn, CreatedAtColumn}
		mutableColumns          = postgres.ColumnList{CustomerIDColumn, TotalPriceColumn, PaymentMethodIDColumn, PaymentStatusColumn, PaymentIdentifierColumn, CreatedAtColumn}
	)

	return transactionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TransactionID:     TransactionIDColumn,
		CustomerID:        CustomerIDColumn,
		TotalPrice:        TotalPriceColumn,
		PaymentMethodID:   PaymentMethodIDColumn,
		PaymentStatus:     PaymentStatusColumn,
		PaymentIdentifier: PaymentIdentifierColumn,
		CreatedAt:         CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
