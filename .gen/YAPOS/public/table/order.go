//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Order = newOrderTable("public", "order", "")

type orderTable struct {
	postgres.Table

	// Columns
	OrderID      postgres.ColumnInteger
	CustomerID   postgres.ColumnInteger
	ShopID       postgres.ColumnInteger
	ItemID       postgres.ColumnInteger
	Quantity     postgres.ColumnInteger
	PromoID      postgres.ColumnInteger
	PerPrice     postgres.ColumnString
	TotalPrice   postgres.ColumnString
	IsTransacted postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrderTable struct {
	orderTable

	EXCLUDED orderTable
}

// AS creates new OrderTable with assigned alias
func (a OrderTable) AS(alias string) *OrderTable {
	return newOrderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrderTable with assigned schema name
func (a OrderTable) FromSchema(schemaName string) *OrderTable {
	return newOrderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrderTable with assigned table prefix
func (a OrderTable) WithPrefix(prefix string) *OrderTable {
	return newOrderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrderTable with assigned table suffix
func (a OrderTable) WithSuffix(suffix string) *OrderTable {
	return newOrderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrderTable(schemaName, tableName, alias string) *OrderTable {
	return &OrderTable{
		orderTable: newOrderTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newOrderTableImpl("", "excluded", ""),
	}
}

func newOrderTableImpl(schemaName, tableName, alias string) orderTable {
	var (
		OrderIDColumn      = postgres.IntegerColumn("order_id")
		CustomerIDColumn   = postgres.IntegerColumn("customer_id")
		ShopIDColumn       = postgres.IntegerColumn("shop_id")
		ItemIDColumn       = postgres.IntegerColumn("item_id")
		QuantityColumn     = postgres.IntegerColumn("quantity")
		PromoIDColumn      = postgres.IntegerColumn("promo_id")
		PerPriceColumn     = postgres.StringColumn("per_price")
		TotalPriceColumn   = postgres.StringColumn("total_price")
		IsTransactedColumn = postgres.BoolColumn("isTransacted")
		allColumns         = postgres.ColumnList{OrderIDColumn, CustomerIDColumn, ShopIDColumn, ItemIDColumn, QuantityColumn, PromoIDColumn, PerPriceColumn, TotalPriceColumn, IsTransactedColumn}
		mutableColumns     = postgres.ColumnList{CustomerIDColumn, ShopIDColumn, ItemIDColumn, QuantityColumn, PromoIDColumn, PerPriceColumn, TotalPriceColumn, IsTransactedColumn}
	)

	return orderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OrderID:      OrderIDColumn,
		CustomerID:   CustomerIDColumn,
		ShopID:       ShopIDColumn,
		ItemID:       ItemIDColumn,
		Quantity:     QuantityColumn,
		PromoID:      PromoIDColumn,
		PerPrice:     PerPriceColumn,
		TotalPrice:   TotalPriceColumn,
		IsTransacted: IsTransactedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
