//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Customer = newCustomerTable("public", "customer", "")

type customerTable struct {
	postgres.Table

	// Columns
	CustomerID postgres.ColumnInteger
	MobileNo   postgres.ColumnString
	FirstName  postgres.ColumnString
	LastName   postgres.ColumnString
	Email      postgres.ColumnString
	CreatedAt  postgres.ColumnTimez
	UpdatedAt  postgres.ColumnTimez

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CustomerTable struct {
	customerTable

	EXCLUDED customerTable
}

// AS creates new CustomerTable with assigned alias
func (a CustomerTable) AS(alias string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CustomerTable with assigned schema name
func (a CustomerTable) FromSchema(schemaName string) *CustomerTable {
	return newCustomerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CustomerTable with assigned table prefix
func (a CustomerTable) WithPrefix(prefix string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CustomerTable with assigned table suffix
func (a CustomerTable) WithSuffix(suffix string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCustomerTable(schemaName, tableName, alias string) *CustomerTable {
	return &CustomerTable{
		customerTable: newCustomerTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCustomerTableImpl("", "excluded", ""),
	}
}

func newCustomerTableImpl(schemaName, tableName, alias string) customerTable {
	var (
		CustomerIDColumn = postgres.IntegerColumn("customer_id")
		MobileNoColumn   = postgres.StringColumn("mobile_no")
		FirstNameColumn  = postgres.StringColumn("first_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		EmailColumn      = postgres.StringColumn("email")
		CreatedAtColumn  = postgres.TimezColumn("created_at")
		UpdatedAtColumn  = postgres.TimezColumn("updated_at")
		allColumns       = postgres.ColumnList{CustomerIDColumn, MobileNoColumn, FirstNameColumn, LastNameColumn, EmailColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{MobileNoColumn, FirstNameColumn, LastNameColumn, EmailColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return customerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CustomerID: CustomerIDColumn,
		MobileNo:   MobileNoColumn,
		FirstName:  FirstNameColumn,
		LastName:   LastNameColumn,
		Email:      EmailColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
